/*!\file CArrayDec.cpp
 * \brief
 *
 *  Created on: 17.06.2019
 *      Author: tombr
 */

#include "CArrayDec.hpp"

CArrayDec::CArrayDec(): currentSize(256) {

	for(int i = 0; i < 256; i++) { //geht durch das ganze Array
			m_symbolTable[i].setSymbol(intToString(i)); //Zuweisung der ersten 256 Symbole der ACII Tabelle
		}
	cout << "CArrayDec funzt" << endl;
}

CArrayDec::~CArrayDec() {

}

int CArrayDec::searchInTable(const string& compare) { //sucht nach in der Tabelle nach dem passenden string

	for(int i = 0; i < currentSize; i++) { // Schleife die durch das Array geht
		if(m_symbolTable[i].getSymbol() == compare) //Vergleichen von Elementen
			return i; //Position als RÃ¼ckgabewert
	}
	return -1; //wenn string nicht gefunden return value = -1
}

void CArrayDec::printSymbolTable(unsigned int index) {
	for(unsigned int i = index; i < static_cast<unsigned int> (currentSize); i++) {
		cout << m_symbolTable[i].getSymbol() << " ";
	}
	cout << endl;
}


string CArrayDec::decode(const vector<unsigned int>& encoded) {
	string decoded("");
	string oldString("");
	string newString("");
	vector<unsigned int>::const_iterator it = encoded.begin();

	oldString = m_symbolTable[*it].getSymbol();
	decoded += m_symbolTable[*it].getSymbol();
	it++;

	for(; it != encoded.end(); it++) {
		newString = m_symbolTable[*it].getSymbol();
		m_symbolTable[currentSize].setSymbol(oldString + *(newString.begin()));
		currentSize++;
		decoded += m_symbolTable[*it].getSymbol();
		oldString = m_symbolTable[*it].getSymbol();
	}
	//cout << "Decoder funzt" << endl;
	return decoded;
}
